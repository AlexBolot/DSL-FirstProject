package ExternalDsl.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class App_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("//Wiring code generated from an ArduinoML model");
    tgs.newLine();
    tgs.append("//From the mps external dsl");
    tgs.newLine();
    tgs.append("//Application name: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$tAp1));
    tgs.newLine();
    tgs.newLine();

    // setup 
    tgs.append("void setup(){");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actuators$$lkD)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.indent();
        tgs.append("pinMode(");
        tgs.append(String.valueOf(SPropertyOperations.getInteger(it, PROPS.pin$$l_3)));
        tgs.append(", OUTPUT);");
        tgs.newLine();
      }
    });
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.sensors$xOD2)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        tgs.indent();
        tgs.append("pinMode(");
        tgs.append(String.valueOf(SPropertyOperations.getInteger(it, PROPS.pin$xOEV)));
        tgs.append(", INPUT);");
        tgs.newLine();
      }
    });
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    // timing stuff for extension 
    tgs.append("long time = 0;");
    tgs.newLine();
    tgs.newLine();

    // iterate over all states( starting from initial 
    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.states$$ljF)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        String.valueOf(it);
      }
    });
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty pin$$l_3 = MetaAdapterFactory.getProperty(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d3L, 0x2ddcf9c555fc33e7L, "pin");
    /*package*/ static final SProperty pin$xOEV = MetaAdapterFactory.getProperty(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d4L, 0x426e08eaa358c051L, "pin");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actuators$$lkD = MetaAdapterFactory.getContainmentLink(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x2ddcf9c555fc33daL, "actuators");
    /*package*/ static final SContainmentLink sensors$xOD2 = MetaAdapterFactory.getContainmentLink(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x426e08eaa358c04dL, "sensors");
    /*package*/ static final SContainmentLink states$$ljF = MetaAdapterFactory.getContainmentLink(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x2ddcf9c555fc33d8L, "states");
  }
}
