package ExternalDsl.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class App_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("//Wiring code generated from an ArduinoML model");
    tgs.newLine();
    tgs.append("//From the mps external dsl");
    tgs.newLine();
    tgs.append("//Application name: ");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$tAp1));
    tgs.newLine();
    tgs.newLine();

    // setup 
    tgs.append("void setup(){");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actuators$$lkD)) {
      tgs.appendNode(item);
    }
    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.sensors$xOD2)) {
      tgs.appendNode(item);
    }
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    // timing stuff for extension 
    tgs.append("long time = 0;");
    tgs.newLine();
    if (!(SPropertyOperations.hasValue(ctx.getPrimaryInput(), PROPS.freq$Mu$q, null))) {
      tgs.append("long defFreq = 1000/");
      tgs.append(String.valueOf(SPropertyOperations.getInteger(ctx.getPrimaryInput(), PROPS.freq$Mu$q)));
      tgs.append(";");
      tgs.newLine();
    } else {
      tgs.append("long defFreq = 200;");
      tgs.newLine();
    }
    tgs.newLine();

    // iterate over all states 
    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.states$$ljF)) {
      tgs.appendNode(item);
    }
    tgs.newLine();
    tgs.append("void loop() {");
    tgs.newLine();

    ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.states$$ljF)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (SPropertyOperations.getBoolean(it, PROPS.is_initial$KN7G)) {
          ctx.getBuffer().area().increaseIndent();
          tgs.indent();
          tgs.append(SPropertyOperations.getString(it, PROPS.name$tAp1));
          tgs.append("();");
          tgs.newLine();
          ctx.getBuffer().area().decreaseIndent();
        }
      }
    });
    tgs.append("}");
    tgs.newLine();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty freq$Mu$q = MetaAdapterFactory.getProperty(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x426e08eaa36c820eL, "freq");
    /*package*/ static final SProperty is_initial$KN7G = MetaAdapterFactory.getProperty(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d5L, 0x2ddcf9c555fce9c3L, "is_initial");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actuators$$lkD = MetaAdapterFactory.getContainmentLink(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x2ddcf9c555fc33daL, "actuators");
    /*package*/ static final SContainmentLink sensors$xOD2 = MetaAdapterFactory.getContainmentLink(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x426e08eaa358c04dL, "sensors");
    /*package*/ static final SContainmentLink states$$ljF = MetaAdapterFactory.getContainmentLink(0x36b21cb1227440d2L, 0x9f74baf372272c13L, 0x2ddcf9c555fc33d7L, 0x2ddcf9c555fc33d8L, "states");
  }
}
